#!/bin/bash
# Expect base collection path as an argument
set -x
BASE_COLLECTION_PATH=$1

# Use PWD as base path if no argument is passed
if [[ ${BASE_COLLECTION_PATH} == "" ]]; then
    BASE_COLLECTION_PATH=$(pwd)
fi

CEPH_COLLLECTION_PATH="${BASE_COLLECTION_PATH}/ceph"

# Ceph resources
ceph_resources=()
ceph_resources+=(cephblockpools)
ceph_resources+=(cephclusters)
ceph_resources+=(cephfilesystems)
ceph_resources+=(cephobjectstores)
ceph_resources+=(cephobjectstoreusers)

# Ceph commands
ceph_commands=()
ceph_commands+=("ceph status")
ceph_commands+=("ceph health detail")
ceph_commands+=("ceph osd tree")
ceph_commands+=("ceph osd stat")
ceph_commands+=("ceph osd dump")
ceph_commands+=("ceph mon stat")
ceph_commands+=("ceph mon dump")
ceph_commands+=("ceph df")
ceph_commands+=("ceph report")
ceph_commands+=("ceph osd df tree")
ceph_commands+=("ceph fs ls")
ceph_commands+=("ceph pg dump")
ceph_commands+=("ceph osd crush show-tunables")
ceph_commands+=("ceph osd crush dump")
ceph_commands+=("ceph mgr dump")
ceph_commands+=("ceph mds stat")
ceph_commands+=("ceph versions")
ceph_commands+=("ceph fs dump")

# Ceph volume commands
ceph_volume_commands+=()
ceph_volume_commands+=("ceph-volume lvm list")

# Inspecting ceph related custom resources for all namespaces 
for resource in ${ceph_resources[@]}; do
    # openshift-must-gather --base-dir=${CEPH_COLLLECTION_PATH} inspect ${resource} --all-namespaces
done

# Inspecting the namespace where ceph-cluster is installed
for ns in $(oc get cephcluster --all-namespaces --no-headers | awk '{print $1}'); do
    # openshift-must-gather --base-dir=${CEPH_COLLLECTION_PATH} inspect ns/${ns}

    # Running ceph commands in the toolbox
    toolbox_pod_name=`oc get po -n ${ns} -l app=rook-ceph-operator -o jsonpath='{.items[*].metadata.name}'`
    if [ ! -z ${toolbox_pod_name} ]; then
        toolbox_pod_status=`oc get po -n ${ns} -l app=rook-ceph-operator -o jsonpath='{.items[*].status.phase}'`
        if [ "$toolbox_pod_status" != "Running" ]; then
            exit 0;
        fi
        COMMAND_OUTPUT_DIR=${CEPH_COLLLECTION_PATH}/namespaces/${ns}/must_gather_commands
        COMMAND_JSON_OUTPUT_DIR=${CEPH_COLLLECTION_PATH}/namespaces/${ns}/must_gather_commands/json_output
        mkdir -p ${COMMAND_OUTPUT_DIR}
        mkdir -p ${COMMAND_JSON_OUTPUT_DIR}
        for ((i = 0; i < ${#ceph_commands[@]}; i++)); do
            printf "collecting command output for: %s\n"  "${ceph_commands[$i]}"
            COMMAND_OUTPUT_FILE=${COMMAND_OUTPUT_DIR}/${ceph_commands[$i]// /_}
            oc -n ${ns} exec ${toolbox_pod_name} -- ${ceph_commands[$i]} >> ${COMMAND_OUTPUT_FILE}
            JSON_COMMAND_OUTPUT_FILE=${COMMAND_JSON_OUTPUT_DIR}/${ceph_commands[$i]// /_}_--format_json-pretty
            oc -n ${ns} exec ${toolbox_pod_name} -- ${ceph_commands[$i]} --connect-timeout=15 --cluster=${ns} --conf=/var/lib/rook/${ns}/${ns}.config --keyring=/var/lib/rook/${ns}/client.admin.keyring --format json-pretty >> ${JSON_COMMAND_OUTPUT_FILE}
        done
        for ((i = 0; i < ${#ceph_volume_commands[@]}; i++)); do
            printf "collecting command output for: %s\n"  "${ceph_volume_commands[$i]}"
            COMMAND_OUTPUT_FILE=${COMMAND_OUTPUT_DIR}/${ceph_volume_commands[$i]// /_}
            oc -n ${ns} exec ${toolbox_pod_name} -- ${ceph_volume_commands[$i]} --connect-timeout=15 --cluster=${ns} --conf=/var/lib/rook/${ns}/${ns}.config --keyring=/var/lib/rook/${ns}/client.admin.keyring >> ${COMMAND_OUTPUT_FILE}
        done
    fi
done
